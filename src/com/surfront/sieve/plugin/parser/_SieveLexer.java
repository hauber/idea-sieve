/* The following code was generated by JFlex 1.4.3 on 8/14/12 11:47 PM */

package com.surfront.sieve.plugin.parser;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 8/14/12 11:47 PM from the specification file
 * <tt>/Users/qingshan/Projects/github/idea-sieve/src/com/surfront/sieve/plugin/parser/Sieve.flex</tt>
 */
class _SieveLexer implements FlexLexer {
  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\7\1\2\1\3\1\0\1\2\1\4\16\7\4\0\1\2\1\0"+
    "\1\12\1\15\1\6\3\0\1\44\1\45\1\14\1\0\1\53\2\0"+
    "\1\13\12\1\1\10\1\52\5\0\6\6\1\11\3\6\1\11\1\6"+
    "\1\11\15\6\1\50\1\5\1\51\1\0\1\6\1\0\1\30\1\40"+
    "\1\27\1\26\1\20\1\17\1\6\1\36\1\16\2\6\1\21\1\41"+
    "\1\34\1\32\1\33\1\24\1\23\1\22\1\31\1\25\1\37\1\6"+
    "\1\42\1\35\1\43\1\46\1\0\1\47\1\0\41\7\2\0\4\6"+
    "\4\0\1\6\2\0\1\7\7\0\1\6\4\0\1\6\5\0\27\6"+
    "\1\0\37\6\1\0\u013f\6\31\0\162\6\4\0\14\6\16\0\5\6"+
    "\11\0\1\6\21\0\130\7\5\0\23\7\12\0\1\6\13\0\1\6"+
    "\1\0\3\6\1\0\1\6\1\0\24\6\1\0\54\6\1\0\46\6"+
    "\1\0\5\6\4\0\202\6\1\0\4\7\3\0\105\6\1\0\46\6"+
    "\2\0\2\6\6\0\20\6\41\0\46\6\2\0\1\6\7\0\47\6"+
    "\11\0\21\7\1\0\27\7\1\0\3\7\1\0\1\7\1\0\2\7"+
    "\1\0\1\7\13\0\33\6\5\0\3\6\15\0\4\7\14\0\6\7"+
    "\13\0\32\6\5\0\13\6\16\7\7\0\12\7\4\0\2\6\1\7"+
    "\143\6\1\0\1\6\10\7\1\0\6\7\2\6\2\7\1\0\4\7"+
    "\2\6\12\7\3\6\2\0\1\6\17\0\1\7\1\6\1\7\36\6"+
    "\33\7\2\0\3\6\60\0\46\6\13\7\1\6\u014f\0\3\7\66\6"+
    "\2\0\1\7\1\6\20\7\2\0\1\6\4\7\3\0\12\6\2\7"+
    "\2\0\12\7\21\0\3\7\1\0\10\6\2\0\2\6\2\0\26\6"+
    "\1\0\7\6\1\0\1\6\3\0\4\6\2\0\1\7\1\6\7\7"+
    "\2\0\2\7\2\0\3\7\11\0\1\7\4\0\2\6\1\0\3\6"+
    "\2\7\2\0\12\7\4\6\15\0\3\7\1\0\6\6\4\0\2\6"+
    "\2\0\26\6\1\0\7\6\1\0\2\6\1\0\2\6\1\0\2\6"+
    "\2\0\1\7\1\0\5\7\4\0\2\7\2\0\3\7\13\0\4\6"+
    "\1\0\1\6\7\0\14\7\3\6\14\0\3\7\1\0\11\6\1\0"+
    "\3\6\1\0\26\6\1\0\7\6\1\0\2\6\1\0\5\6\2\0"+
    "\1\7\1\6\10\7\1\0\3\7\1\0\3\7\2\0\1\6\17\0"+
    "\2\6\2\7\2\0\12\7\1\0\1\6\17\0\3\7\1\0\10\6"+
    "\2\0\2\6\2\0\26\6\1\0\7\6\1\0\2\6\1\0\5\6"+
    "\2\0\1\7\1\6\6\7\3\0\2\7\2\0\3\7\10\0\2\7"+
    "\4\0\2\6\1\0\3\6\4\0\12\7\1\0\1\6\20\0\1\7"+
    "\1\6\1\0\6\6\3\0\3\6\1\0\4\6\3\0\2\6\1\0"+
    "\1\6\1\0\2\6\3\0\2\6\3\0\3\6\3\0\10\6\1\0"+
    "\3\6\4\0\5\7\3\0\3\7\1\0\4\7\11\0\1\7\17\0"+
    "\11\7\11\0\1\6\7\0\3\7\1\0\10\6\1\0\3\6\1\0"+
    "\27\6\1\0\12\6\1\0\5\6\4\0\7\7\1\0\3\7\1\0"+
    "\4\7\7\0\2\7\11\0\2\6\4\0\12\7\22\0\2\7\1\0"+
    "\10\6\1\0\3\6\1\0\27\6\1\0\12\6\1\0\5\6\2\0"+
    "\1\7\1\6\7\7\1\0\3\7\1\0\4\7\7\0\2\7\7\0"+
    "\1\6\1\0\2\6\4\0\12\7\22\0\2\7\1\0\10\6\1\0"+
    "\3\6\1\0\27\6\1\0\20\6\4\0\6\7\2\0\3\7\1\0"+
    "\4\7\11\0\1\7\10\0\2\6\4\0\12\7\22\0\2\7\1\0"+
    "\22\6\3\0\30\6\1\0\11\6\1\0\1\6\2\0\7\6\3\0"+
    "\1\7\4\0\6\7\1\0\1\7\1\0\10\7\22\0\2\7\15\0"+
    "\60\6\1\7\2\6\7\7\4\0\10\6\10\7\1\0\12\7\47\0"+
    "\2\6\1\0\1\6\2\0\2\6\1\0\1\6\2\0\1\6\6\0"+
    "\4\6\1\0\7\6\1\0\3\6\1\0\1\6\1\0\1\6\2\0"+
    "\2\6\1\0\4\6\1\7\2\6\6\7\1\0\2\7\1\6\2\0"+
    "\5\6\1\0\1\6\1\0\6\7\2\0\12\7\2\0\2\6\42\0"+
    "\1\6\27\0\2\7\6\0\12\7\13\0\1\7\1\0\1\7\1\0"+
    "\1\7\4\0\2\7\10\6\1\0\42\6\6\0\24\7\1\0\2\7"+
    "\4\6\4\0\10\7\1\0\44\7\11\0\1\7\71\0\42\6\1\0"+
    "\5\6\1\0\2\6\1\0\7\7\3\0\4\7\6\0\12\7\6\0"+
    "\6\6\4\7\106\0\46\6\12\0\51\6\7\0\132\6\5\0\104\6"+
    "\5\0\122\6\6\0\7\6\1\0\77\6\1\0\1\6\1\0\4\6"+
    "\2\0\7\6\1\0\1\6\1\0\4\6\2\0\47\6\1\0\1\6"+
    "\1\0\4\6\2\0\37\6\1\0\1\6\1\0\4\6\2\0\7\6"+
    "\1\0\1\6\1\0\4\6\2\0\7\6\1\0\7\6\1\0\27\6"+
    "\1\0\37\6\1\0\1\6\1\0\4\6\2\0\7\6\1\0\47\6"+
    "\1\0\23\6\16\0\11\7\56\0\125\6\14\0\u026c\6\2\0\10\6"+
    "\12\0\32\6\5\0\113\6\3\0\3\6\17\0\15\6\1\0\4\6"+
    "\3\7\13\0\22\6\3\7\13\0\22\6\2\7\14\0\15\6\1\0"+
    "\3\6\1\0\2\7\14\0\64\6\40\7\3\0\1\6\3\0\2\6"+
    "\1\7\2\0\12\7\41\0\3\7\2\0\12\7\6\0\130\6\10\0"+
    "\51\6\1\7\126\0\35\6\3\0\14\7\4\0\14\7\12\0\12\7"+
    "\36\6\2\0\5\6\u038b\0\154\6\224\0\234\6\4\0\132\6\6\0"+
    "\26\6\2\0\6\6\2\0\46\6\2\0\6\6\2\0\10\6\1\0"+
    "\1\6\1\0\1\6\1\0\1\6\1\0\37\6\2\0\65\6\1\0"+
    "\7\6\1\0\1\6\3\0\3\6\1\0\7\6\3\0\4\6\2\0"+
    "\6\6\4\0\15\6\5\0\3\6\1\0\7\6\17\0\4\7\32\0"+
    "\5\7\20\0\2\6\23\0\1\6\13\0\4\7\6\0\6\7\1\0"+
    "\1\6\15\0\1\6\40\0\22\6\36\0\15\7\4\0\1\7\3\0"+
    "\6\7\27\0\1\6\4\0\1\6\2\0\12\6\1\0\1\6\3\0"+
    "\5\6\6\0\1\6\1\0\1\6\1\0\1\6\1\0\4\6\1\0"+
    "\3\6\1\0\7\6\3\0\3\6\5\0\5\6\26\0\44\6\u0e81\0"+
    "\3\6\31\0\11\6\6\7\1\0\5\6\2\0\5\6\4\0\126\6"+
    "\2\0\2\7\2\0\3\6\1\0\137\6\5\0\50\6\4\0\136\6"+
    "\21\0\30\6\70\0\20\6\u0200\0\u19b6\6\112\0\u51a6\6\132\0\u048d\6"+
    "\u0773\0\u2ba4\6\u215c\0\u012e\6\2\0\73\6\225\0\7\6\14\0\5\6"+
    "\5\0\1\6\1\7\12\6\1\0\15\6\1\0\5\6\1\0\1\6"+
    "\1\0\2\6\1\0\2\6\1\0\154\6\41\0\u016b\6\22\0\100\6"+
    "\2\0\66\6\50\0\15\6\3\0\20\7\20\0\4\7\17\0\2\6"+
    "\30\0\3\6\31\0\1\6\6\0\5\6\1\0\207\6\2\0\1\7"+
    "\4\0\1\6\13\0\12\7\7\0\32\6\4\0\1\6\1\0\32\6"+
    "\12\0\132\6\3\0\6\6\2\0\6\6\2\0\6\6\2\0\3\6"+
    "\3\0\2\6\3\0\2\6\22\0\3\7\4\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\1\1\1\5\1\1"+
    "\1\6\16\4\1\7\1\10\1\11\1\12\1\13\1\14"+
    "\1\15\1\16\1\2\1\17\1\0\2\5\1\20\1\21"+
    "\1\22\24\4\2\5\1\20\10\4\1\23\10\4\1\24"+
    "\3\4\1\0\2\4\1\25\2\4\1\26\1\4\1\27"+
    "\10\4\1\30\2\4\1\31\1\32\1\20\1\33\1\34"+
    "\2\4\1\35\2\4\1\36\4\4\1\37\3\4\1\40"+
    "\7\4\1\41\1\4\1\42\1\43\1\44\2\4\1\45"+
    "\1\4\1\46\2\4\1\47\1\50\1\4\1\51";

  private static int [] zzUnpackAction() {
    int [] result = new int[146];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\54\0\130\0\204\0\260\0\334\0\u0108\0\u0134"+
    "\0\u0160\0\u018c\0\u01b8\0\u01e4\0\u0210\0\u023c\0\u0268\0\u0294"+
    "\0\u02c0\0\u02ec\0\u0318\0\u0344\0\u0370\0\u039c\0\u03c8\0\54"+
    "\0\54\0\54\0\54\0\54\0\54\0\54\0\54\0\54"+
    "\0\u03f4\0\334\0\u0420\0\54\0\u044c\0\260\0\260\0\u0478"+
    "\0\u04a4\0\u04d0\0\u04fc\0\u0528\0\u0554\0\u0580\0\u05ac\0\u05d8"+
    "\0\u0604\0\u0630\0\u065c\0\u0688\0\u06b4\0\u06e0\0\u070c\0\u0738"+
    "\0\u0764\0\u0790\0\u07bc\0\u07e8\0\u0814\0\u0840\0\u086c\0\u0898"+
    "\0\u08c4\0\u08f0\0\u091c\0\u0948\0\u0974\0\u09a0\0\260\0\u09cc"+
    "\0\u09f8\0\u0a24\0\u0a50\0\u0a7c\0\u0aa8\0\u0ad4\0\u0b00\0\260"+
    "\0\u0b2c\0\u0b58\0\u0b84\0\u0bb0\0\u0bdc\0\u0c08\0\260\0\u0c34"+
    "\0\u0c60\0\260\0\u0c8c\0\260\0\u0cb8\0\u0ce4\0\u0d10\0\u0d3c"+
    "\0\u0d68\0\u0d94\0\u0dc0\0\u0dec\0\260\0\u0e18\0\u0e44\0\260"+
    "\0\260\0\54\0\260\0\260\0\u0e70\0\u0e9c\0\260\0\u0ec8"+
    "\0\u0ef4\0\260\0\u0f20\0\u0f4c\0\u0f78\0\u0fa4\0\260\0\u0fd0"+
    "\0\u0ffc\0\u1028\0\260\0\u1054\0\u1080\0\u10ac\0\u10d8\0\u1104"+
    "\0\u1130\0\u115c\0\260\0\u1188\0\260\0\260\0\260\0\u11b4"+
    "\0\u11e0\0\260\0\u120c\0\260\0\u1238\0\u1264\0\260\0\260"+
    "\0\u1290\0\260";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[146];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\3\4\1\2\1\5\1\2\1\6\1\5"+
    "\1\7\1\10\1\2\1\11\1\12\1\13\1\14\1\5"+
    "\1\15\1\16\1\5\1\17\1\20\1\5\1\21\1\22"+
    "\1\5\1\23\1\24\1\5\1\25\1\5\1\26\1\27"+
    "\2\5\1\30\1\31\1\32\1\33\1\34\1\35\1\36"+
    "\1\37\55\0\1\3\7\0\1\40\44\0\3\4\50\0"+
    "\1\5\4\0\2\5\1\0\1\5\4\0\26\5\16\0"+
    "\1\41\1\0\1\42\1\41\4\0\26\41\10\0\3\7"+
    "\2\0\1\43\4\7\1\44\41\7\14\0\1\45\37\0"+
    "\3\11\2\0\47\11\1\0\1\5\4\0\2\5\1\0"+
    "\1\5\4\0\1\5\1\46\13\5\1\47\10\5\11\0"+
    "\1\5\4\0\2\5\1\0\1\5\4\0\12\5\1\50"+
    "\13\5\11\0\1\5\4\0\2\5\1\0\1\5\4\0"+
    "\3\5\1\51\12\5\1\52\5\5\1\53\1\5\11\0"+
    "\1\5\4\0\2\5\1\0\1\5\4\0\1\54\10\5"+
    "\1\55\1\5\1\56\12\5\11\0\1\5\4\0\2\5"+
    "\1\0\1\5\4\0\2\5\1\57\23\5\11\0\1\5"+
    "\4\0\2\5\1\0\1\5\4\0\5\5\1\60\20\5"+
    "\11\0\1\5\4\0\2\5\1\0\1\5\4\0\1\61"+
    "\25\5\11\0\1\5\4\0\2\5\1\0\1\5\4\0"+
    "\3\5\1\62\4\5\1\63\2\5\1\64\2\5\1\65"+
    "\7\5\11\0\1\5\4\0\2\5\1\0\1\5\4\0"+
    "\5\5\1\66\20\5\11\0\1\5\4\0\2\5\1\0"+
    "\1\5\4\0\5\5\1\67\20\5\11\0\1\5\4\0"+
    "\2\5\1\0\1\5\4\0\14\5\1\70\11\5\11\0"+
    "\1\5\4\0\2\5\1\0\1\5\4\0\2\5\1\71"+
    "\23\5\11\0\1\5\4\0\2\5\1\0\1\5\4\0"+
    "\14\5\1\72\11\5\11\0\1\5\4\0\2\5\1\0"+
    "\1\5\4\0\1\73\25\5\11\0\1\41\4\0\2\41"+
    "\1\0\1\41\4\0\26\41\10\0\2\7\1\74\1\7"+
    "\1\75\47\7\14\76\1\0\37\76\1\0\1\5\4\0"+
    "\2\5\1\0\1\5\4\0\3\5\1\77\22\5\11\0"+
    "\1\5\4\0\2\5\1\0\1\5\4\0\4\5\1\100"+
    "\21\5\11\0\1\5\4\0\2\5\1\0\1\5\4\0"+
    "\21\5\1\101\4\5\11\0\1\5\4\0\2\5\1\0"+
    "\1\5\4\0\1\102\25\5\11\0\1\5\4\0\2\5"+
    "\1\0\1\5\4\0\25\5\1\103\11\0\1\5\4\0"+
    "\2\5\1\0\1\5\4\0\14\5\1\104\11\5\11\0"+
    "\1\5\4\0\2\5\1\0\1\5\4\0\14\5\1\105"+
    "\11\5\11\0\1\5\4\0\2\5\1\0\1\5\4\0"+
    "\6\5\1\106\17\5\11\0\1\5\4\0\2\5\1\0"+
    "\1\5\4\0\1\107\25\5\11\0\1\5\4\0\2\5"+
    "\1\0\1\5\4\0\4\5\1\110\21\5\11\0\1\5"+
    "\4\0\2\5\1\0\1\5\4\0\3\5\1\111\22\5"+
    "\11\0\1\5\4\0\2\5\1\0\1\5\4\0\10\5"+
    "\1\112\15\5\11\0\1\5\4\0\2\5\1\0\1\5"+
    "\4\0\13\5\1\113\12\5\11\0\1\5\4\0\2\5"+
    "\1\0\1\5\4\0\12\5\1\114\4\5\1\115\6\5"+
    "\11\0\1\5\4\0\2\5\1\0\1\5\4\0\7\5"+
    "\1\116\16\5\11\0\1\5\4\0\2\5\1\0\1\5"+
    "\4\0\2\5\1\117\23\5\11\0\1\5\4\0\2\5"+
    "\1\0\1\5\4\0\13\5\1\120\12\5\11\0\1\5"+
    "\4\0\2\5\1\0\1\5\4\0\12\5\1\121\13\5"+
    "\11\0\1\5\4\0\2\5\1\0\1\5\4\0\10\5"+
    "\1\122\15\5\11\0\1\5\4\0\2\5\1\0\1\5"+
    "\4\0\23\5\1\123\2\5\10\0\2\7\1\74\1\7"+
    "\1\75\1\43\4\7\1\44\45\7\1\0\1\43\4\7"+
    "\1\44\41\7\14\76\1\124\37\76\1\0\1\5\4\0"+
    "\2\5\1\0\1\5\4\0\4\5\1\125\21\5\11\0"+
    "\1\5\4\0\2\5\1\0\1\5\4\0\1\126\1\5"+
    "\1\127\23\5\11\0\1\5\4\0\2\5\1\0\1\5"+
    "\4\0\2\5\1\130\23\5\11\0\1\5\4\0\2\5"+
    "\1\0\1\5\4\0\4\5\1\131\21\5\11\0\1\5"+
    "\4\0\2\5\1\0\1\5\4\0\2\5\1\132\23\5"+
    "\11\0\1\5\4\0\2\5\1\0\1\5\4\0\5\5"+
    "\1\133\20\5\11\0\1\5\4\0\2\5\1\0\1\5"+
    "\4\0\15\5\1\134\10\5\11\0\1\5\4\0\2\5"+
    "\1\0\1\5\4\0\7\5\1\135\16\5\11\0\1\5"+
    "\4\0\2\5\1\0\1\5\4\0\11\5\1\136\14\5"+
    "\11\0\1\5\4\0\2\5\1\0\1\5\4\0\14\5"+
    "\1\137\11\5\11\0\1\5\4\0\2\5\1\0\1\5"+
    "\4\0\5\5\1\140\20\5\11\0\1\5\4\0\2\5"+
    "\1\0\1\5\4\0\5\5\1\141\4\5\1\142\13\5"+
    "\11\0\1\5\4\0\2\5\1\0\1\5\4\0\3\5"+
    "\1\143\22\5\11\0\1\5\4\0\2\5\1\0\1\5"+
    "\4\0\14\5\1\144\11\5\11\0\1\5\4\0\2\5"+
    "\1\0\1\5\4\0\2\5\1\145\23\5\11\0\1\5"+
    "\4\0\2\5\1\0\1\5\4\0\12\5\1\146\13\5"+
    "\11\0\1\5\4\0\2\5\1\0\1\5\4\0\10\5"+
    "\1\147\15\5\11\0\1\5\4\0\2\5\1\0\1\5"+
    "\4\0\17\5\1\150\6\5\11\0\1\5\4\0\2\5"+
    "\1\0\1\5\4\0\2\5\1\151\23\5\10\0\13\76"+
    "\1\152\1\124\37\76\1\0\1\5\4\0\2\5\1\0"+
    "\1\5\4\0\2\5\1\153\23\5\11\0\1\5\4\0"+
    "\2\5\1\0\1\5\4\0\1\5\1\154\24\5\11\0"+
    "\1\5\4\0\2\5\1\0\1\5\4\0\3\5\1\155"+
    "\22\5\11\0\1\5\4\0\2\5\1\0\1\5\4\0"+
    "\13\5\1\156\12\5\11\0\1\5\4\0\2\5\1\0"+
    "\1\5\4\0\2\5\1\157\23\5\11\0\1\5\4\0"+
    "\2\5\1\0\1\5\4\0\1\160\25\5\11\0\1\5"+
    "\4\0\2\5\1\0\1\5\4\0\12\5\1\161\13\5"+
    "\11\0\1\5\4\0\2\5\1\0\1\5\4\0\1\5"+
    "\1\162\24\5\11\0\1\5\4\0\2\5\1\0\1\5"+
    "\4\0\2\5\1\163\23\5\11\0\1\5\4\0\2\5"+
    "\1\0\1\5\4\0\1\164\25\5\11\0\1\5\4\0"+
    "\2\5\1\0\1\5\4\0\11\5\1\165\14\5\11\0"+
    "\1\5\4\0\2\5\1\0\1\5\4\0\17\5\1\166"+
    "\6\5\11\0\1\5\4\0\2\5\1\0\1\5\4\0"+
    "\1\5\1\167\24\5\11\0\1\5\4\0\2\5\1\0"+
    "\1\5\4\0\23\5\1\170\2\5\11\0\1\5\4\0"+
    "\2\5\1\0\1\5\4\0\2\5\1\171\23\5\11\0"+
    "\1\5\4\0\2\5\1\0\1\5\4\0\14\5\1\172"+
    "\11\5\11\0\1\5\4\0\2\5\1\0\1\5\4\0"+
    "\4\5\1\173\21\5\11\0\1\5\4\0\2\5\1\0"+
    "\1\5\4\0\5\5\1\174\20\5\11\0\1\5\4\0"+
    "\2\5\1\0\1\5\4\0\5\5\1\175\20\5\11\0"+
    "\1\5\4\0\2\5\1\0\1\5\4\0\4\5\1\176"+
    "\21\5\11\0\1\5\4\0\2\5\1\0\1\5\4\0"+
    "\22\5\1\177\3\5\11\0\1\5\4\0\2\5\1\0"+
    "\1\5\4\0\20\5\1\200\5\5\11\0\1\5\4\0"+
    "\2\5\1\0\1\5\4\0\25\5\1\201\11\0\1\5"+
    "\4\0\2\5\1\0\1\5\4\0\22\5\1\202\3\5"+
    "\11\0\1\5\4\0\2\5\1\0\1\5\4\0\5\5"+
    "\1\203\20\5\11\0\1\5\4\0\2\5\1\0\1\5"+
    "\4\0\15\5\1\204\10\5\11\0\1\5\4\0\2\5"+
    "\1\0\1\5\4\0\2\5\1\205\23\5\11\0\1\5"+
    "\4\0\2\5\1\0\1\5\4\0\10\5\1\206\15\5"+
    "\11\0\1\5\4\0\2\5\1\0\1\5\4\0\4\5"+
    "\1\207\21\5\11\0\1\5\4\0\2\5\1\0\1\5"+
    "\4\0\7\5\1\210\16\5\11\0\1\5\4\0\2\5"+
    "\1\0\1\5\4\0\23\5\1\211\2\5\11\0\1\5"+
    "\4\0\2\5\1\0\1\5\4\0\2\5\1\212\23\5"+
    "\11\0\1\5\4\0\2\5\1\0\1\5\4\0\3\5"+
    "\1\213\22\5\11\0\1\5\4\0\2\5\1\0\1\5"+
    "\4\0\2\5\1\214\23\5\11\0\1\5\4\0\2\5"+
    "\1\0\1\5\4\0\13\5\1\215\12\5\11\0\1\5"+
    "\4\0\2\5\1\0\1\5\4\0\2\5\1\216\23\5"+
    "\11\0\1\5\4\0\2\5\1\0\1\5\4\0\2\5"+
    "\1\217\23\5\11\0\1\5\4\0\2\5\1\0\1\5"+
    "\4\0\2\5\1\220\23\5\11\0\1\5\4\0\2\5"+
    "\1\0\1\5\4\0\16\5\1\221\7\5\11\0\1\5"+
    "\4\0\2\5\1\0\1\5\4\0\13\5\1\222\12\5"+
    "\10\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[4796];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;
  private static final char[] EMPTY_BUFFER = new char[0];
  private static final int YYEOF = -1;
  private static java.io.Reader zzReader = null; // Fake

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\25\1\11\11\1\1\1\0\1\1\1\11"+
    "\57\1\1\0\25\1\1\11\50\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[146];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** this buffer may contains the current text array to be matched when it is cheap to acquire it */
  private char[] zzBufferArray;

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;


  _SieveLexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  _SieveLexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 1754) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart(){
    return zzStartRead;
  }

  public final int getTokenEnd(){
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end,int initialState){
    zzBuffer = buffer;
    zzBufferArray = com.intellij.util.text.CharArrayUtil.fromSequenceWithoutCopying(buffer);
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzPushbackPos = 0;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBufferArray != null ? zzBufferArray[zzStartRead+pos]:zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;
    char[] zzBufferArrayL = zzBufferArray;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL.charAt(zzCurrentPosL++);
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL.charAt(zzCurrentPosL++);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 36: 
          { yybegin(YYINITIAL); return SieveTokenTypes.ADDRESS_KEYWORD;
          }
        case 42: break;
        case 18: 
          { yybegin(YYINITIAL); return SieveTokenTypes.IP_KEYWORD;
          }
        case 43: break;
        case 3: 
          { return SieveTokenTypes.WHITE_SPACE;
          }
        case 44: break;
        case 1: 
          { yybegin(YYINITIAL); return SieveTokenTypes.BAD_CHARACTER;
          }
        case 45: break;
        case 38: 
          { yybegin(YYINITIAL); return SieveTokenTypes.ENVELOPE_KEYWORD;
          }
        case 46: break;
        case 13: 
          { yybegin(YYINITIAL); return SieveTokenTypes.SEMICOLON;
          }
        case 47: break;
        case 19: 
          { yybegin(YYINITIAL); return SieveTokenTypes.URI_KEYWORD;
          }
        case 48: break;
        case 24: 
          { yybegin(YYINITIAL); return SieveTokenTypes.TRUE_KEYWORD;
          }
        case 49: break;
        case 23: 
          { yybegin(YYINITIAL); return SieveTokenTypes.STOP_KEYWORD;
          }
        case 50: break;
        case 39: 
          { yybegin(YYINITIAL); return SieveTokenTypes.PREAMBLE_KEYWORD;
          }
        case 51: break;
        case 20: 
          { yybegin(YYINITIAL); return SieveTokenTypes.NOT_KEYWORD;
          }
        case 52: break;
        case 40: 
          { yybegin(YYINITIAL); return SieveTokenTypes.ATTRIBUTE_KEYWORD;
          }
        case 53: break;
        case 34: 
          { yybegin(YYINITIAL); return SieveTokenTypes.REQUIRE_KEYWORD;
          }
        case 54: break;
        case 32: 
          { yybegin(YYINITIAL); return SieveTokenTypes.EXISTS_KEYWORD;
          }
        case 55: break;
        case 30: 
          { yybegin(YYINITIAL); return SieveTokenTypes.ALLOF_KEYWORD;
          }
        case 56: break;
        case 12: 
          { yybegin(YYINITIAL); return SieveTokenTypes.RBRACKET;
          }
        case 57: break;
        case 28: 
          { yybegin(YYINITIAL); return SieveTokenTypes.ELSIF_KEYWORD;
          }
        case 58: break;
        case 8: 
          { yybegin(YYINITIAL); return SieveTokenTypes.RPAREN;
          }
        case 59: break;
        case 7: 
          { yybegin(YYINITIAL); return SieveTokenTypes.LPAREN;
          }
        case 60: break;
        case 21: 
          { yybegin(YYINITIAL); return SieveTokenTypes.ELSE_KEYWORD;
          }
        case 61: break;
        case 6: 
          { return SieveTokenTypes.END_OF_LINE_COMMENT;
          }
        case 62: break;
        case 14: 
          { yybegin(YYINITIAL); return SieveTokenTypes.COMMA;
          }
        case 63: break;
        case 2: 
          { yybegin(YYINITIAL); return SieveTokenTypes.NUMBER_LITERAL;
          }
        case 64: break;
        case 37: 
          { yybegin(YYINITIAL); return SieveTokenTypes.ANALYZE_KEYWORD;
          }
        case 65: break;
        case 25: 
          { yybegin(YYINITIAL); return SieveTokenTypes.BODY_KEYWORD;
          }
        case 66: break;
        case 35: 
          { yybegin(YYINITIAL); return SieveTokenTypes.DISCARD_KEYWORD;
          }
        case 67: break;
        case 4: 
          { yybegin(YYINITIAL); return SieveTokenTypes.UNKNOWN_KEYWORD;
          }
        case 68: break;
        case 41: 
          { yybegin(YYINITIAL); return SieveTokenTypes.ATTACHMENT_KEYWORD;
          }
        case 69: break;
        case 15: 
          { yybegin(YYINITIAL); return SieveTokenTypes.TAG_LITERAL;
          }
        case 70: break;
        case 22: 
          { yybegin(YYINITIAL); return SieveTokenTypes.SIZE_KEYWORD;
          }
        case 71: break;
        case 10: 
          { yybegin(YYINITIAL); return SieveTokenTypes.RBRACE;
          }
        case 72: break;
        case 31: 
          { yybegin(YYINITIAL); return SieveTokenTypes.ANYOF_KEYWORD;
          }
        case 73: break;
        case 9: 
          { yybegin(YYINITIAL); return SieveTokenTypes.LBRACE;
          }
        case 74: break;
        case 16: 
          { return SieveTokenTypes.C_STYLE_COMMENT;
          }
        case 75: break;
        case 26: 
          { yybegin(YYINITIAL); return SieveTokenTypes.MIME_KEYWORD;
          }
        case 76: break;
        case 5: 
          { yybegin(YYINITIAL); return SieveTokenTypes.STRING_LITERAL;
          }
        case 77: break;
        case 27: 
          { yybegin(YYINITIAL); return SieveTokenTypes.FALSE_KEYWORD;
          }
        case 78: break;
        case 11: 
          { yybegin(YYINITIAL); return SieveTokenTypes.LBRACKET;
          }
        case 79: break;
        case 29: 
          { yybegin(YYINITIAL); return SieveTokenTypes.SCORE_KEYWORD;
          }
        case 80: break;
        case 17: 
          { yybegin(YYINITIAL); return SieveTokenTypes.IF_KEYWORD;
          }
        case 81: break;
        case 33: 
          { yybegin(YYINITIAL); return SieveTokenTypes.HEADER_KEYWORD;
          }
        case 82: break;
        default:
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
            return null;
          }
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
