#parser error messages
sieve.expected.expression=expression expected
sieve.parser.property.expected=property expected
sieve.expected.lbrace={ expected
sieve.expected.rbrace=} expected
sieve.expected.identifier.string.literal.or.numeric.literal=identifier or string literal or numeric literal expected
sieve.expected.colon=: expected
sieve.expected.semicolon=; expected
sieve.expected.expression.comma.or.rbracket=expression or , or ] expected
sieve.expected.rbracket=] expected
sieve.expected.lparen=( expected
sieve.expected.rparen=) expected
sieve.expected.name=name expected
sieve.expected.comma.or.rparen=, or ) expected
sieve.expected.function.name=function name expected
sieve.expected.formal.parameter.name=formal parameter name expected
sieve.expected.statement=statement expected
sieve.expected.parameter.name=parameter name expected
sieve.expected.catch.or.default=catch or default expected
sieve.expected.forloop.left.hand.side.expression.or.variable.declaration=left hand side expression or variable declaration expected before 'in'
sieve.expected.forloop.in.or.semicolon='in' or ; expected
sieve.expected.while.keyword=while expected
sieve.expected.comma=, expected
sieve.expected.variable.name=variable name expected
sieve.missing.rbrace=missing }
sieve.unexpected.end.of.file=unexpected end of file
sieve.unclosed.string.literal=Unclosed string literal

#Highlighting categories
sieve.keyword=Keyword
sieve.string=String
sieve.number=Number
sieve.linecomment=Line comment
sieve.doccomment=Doc comment
sieve.blockcomment=Block comment
sieve.regexp=Regular expression
sieve.operation=Operation
sieve.parens=Parenthesis
sieve.brackets=Brackets
sieve.braces=Braces
sieve.semicolon=Semicolon
sieve.badcharacter=Bad character
sieve.docmarkup=Documentation markup
sieve.doctag=Documentation tag
sieve.valid.string.escape=Valid string escape
sieve.invalid.string.escape=Invalid string escape
sieve.comma=Comma
sieve.dot=Dot
